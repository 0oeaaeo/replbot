#!/bin/bash
#
# REPLbot terminal sharing script for the client.
# See https://heckel.io/replbot for details.
#
# This script will create a local tmux session, and a reverse SSH tunnel (ssh -R) to the REPLbot server,
# connecting the local tmux session to a remote tmux session.
#
# This script is customized for one session only. It'll only work once.
#

local_socket=/tmp/replbot_{{.SessionID}}.sock
ssh_server={{.ServerHost}}
ssh_port={{.ServerPort}}
ssh_user={{.SessionID}}
relay_port={{.RelayPort}}
tmux_session=replbot_{{.SessionID}}_client

[ -f /usr/bin/ssh ] || { echo "error: ssh is required."; exit 1; }
[ -f /usr/bin/tmux ] || { echo "error: tmux is required."; exit 1; }
[ -f /usr/bin/socat ] || { echo "error: socat is required."; exit 1; }
tmux has-session -t ${tmux_session} 2>/dev/null && { echo "error: tmux session ${tmux_session} already exists"; exit 1; }

# Set up cleanup hooks
cleanup() {
  tmux kill-session -t ${tmux_session} 2>/dev/null
  kill ${SOCAT_PID} ${SSH_PID} 2>/dev/null
}
trap cleanup EXIT

# Start new tmux session, and redirect TTY to relay port, attach tmux client and forward traffic to local socket
tmux new-session -d -s ${tmux_session}
tmux set-option -g -t ${tmux_session} status off
socat exec:"tmux attach -t ${tmux_session}",pty,raw,echo=0,stderr,setsid,sigint,sane \
    unix-listen:${local_socket} &
export SOCAT_PID=$!

# Open reverse tunnel and redirect incoming traffic to local port
ssh \
  -fN \
  -R ${relay_port}:${local_socket} \
  -p ${ssh_port} \
  -o ExitOnForwardFailure=yes \
  -o UserKnownHostsFile=/dev/null \
  -o ExitOnForwardFailure=yes \
  -o StrictHostKeyChecking=no \
  -o PasswordAuthentication=no \
  ${ssh_user}@${ssh_server}
export SSH_PID=$! SSH_CODE=$?
[ $SSH_CODE -eq 0 ] || { echo "error: cannot start reverse tunnel"; exit 1; }

# Attach another client
tmux attach -t ${tmux_session}

clear
echo "Session ended."
